syntax = "proto3";
option go_package = "grpc-gateway/api/proto";

package online.gonlink;

import "google/api/annotations.proto";
import "common.proto";

// === Constant ===
message DataClient{
  string name = 1;
  int64 data = 2;
}

message Click{
  string date = 1;
  int64 data = 2;
}

// === GeneralTraffics ===
message GeneralTrafficsSearchRequest{
  optional int32 page = 1;
  optional int32 size = 2;
  optional string sortDirection = 3;
  string zoneId = 4;
}

message PageInfo {
  int32 currentPage = 1;
  int32 totalPages = 2;
  int64 totalElements = 3;
  int32 pageSize = 4;
}

message GeneralTraffic{
  string shortCode = 1;
  string originalUrl = 2;
  string trafficDate = 3;
  int64 traffic = 4;
}

message GeneralTrafficsSearchResponse{
  repeated GeneralTraffic generalTraffic = 1;
  PageInfo pageInfo = 2;
}

// === MonthTraffics ===
message MonthTrafficsGetAllRequest{
  string shortCode = 1;
  string zoneId = 2;
}

message MonthTrafficGetAllResponse{
  repeated Click trafficData = 1;
}

// === DayTraffics ===
message DayTrafficInRangeRequest{
  string shortCode = 1;
  string fromDate = 2;
  string toDate = 3;
  string zoneId = 4;
}

message DayTrafficInRangeResponse{
  repeated Click click = 1;
  repeated Click cities = 2;
  repeated Click countries = 3;
  repeated Click zoneIds = 4;
  repeated Click browsers = 5;
  repeated Click browserVersions = 6;
  repeated Click operatingSystems = 7;
  repeated Click deviceTypes = 8;
}

// === RealTimeTraffics ===
message RealTimeTrafficRequest{
  string shortCode = 1;
  string zoneId = 2;
}

message RealTimeTrafficResponse{
  repeated int32 data = 1;
}


service Traffic {

  rpc searchGeneralTraffics(GeneralTrafficsSearchRequest) returns(online.gonlink.BaseGrpc){
    option (google.api.http) = {
      post: "/api/v1/traffics/general"
      body: "*"
    };
  }

  rpc getAllMonthTraffics(MonthTrafficsGetAllRequest) returns(online.gonlink.BaseGrpc){
    option (google.api.http) = {
      post: "/api/v1/traffics/month-all"
      body: "*"
    };
  }

  rpc getDayTrafficInRange(DayTrafficInRangeRequest) returns(online.gonlink.BaseGrpc){
    option (google.api.http) = {
      post: "/api/v1/traffics/day-range"
      body: "*"
    };
  }

  rpc getRealTimeTraffic(RealTimeTrafficRequest) returns(online.gonlink.BaseGrpc){
    option (google.api.http) = {
      post: "/api/v1/traffics/real-time"
      body: "*"
    };
  }
}