// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: qr-code-service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	QRCode_GetStringBase64Image_FullMethodName = "/online.gonlink.QRCode/getStringBase64Image"
)

// QRCodeClient is the client API for QRCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QRCodeClient interface {
	GetStringBase64Image(ctx context.Context, in *GetStringBase64ImageRequest, opts ...grpc.CallOption) (*BaseGrpc, error)
}

type qRCodeClient struct {
	cc grpc.ClientConnInterface
}

func NewQRCodeClient(cc grpc.ClientConnInterface) QRCodeClient {
	return &qRCodeClient{cc}
}

func (c *qRCodeClient) GetStringBase64Image(ctx context.Context, in *GetStringBase64ImageRequest, opts ...grpc.CallOption) (*BaseGrpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseGrpc)
	err := c.cc.Invoke(ctx, QRCode_GetStringBase64Image_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QRCodeServer is the server API for QRCode service.
// All implementations must embed UnimplementedQRCodeServer
// for forward compatibility
type QRCodeServer interface {
	GetStringBase64Image(context.Context, *GetStringBase64ImageRequest) (*BaseGrpc, error)
	mustEmbedUnimplementedQRCodeServer()
}

// UnimplementedQRCodeServer must be embedded to have forward compatible implementations.
type UnimplementedQRCodeServer struct {
}

func (UnimplementedQRCodeServer) GetStringBase64Image(context.Context, *GetStringBase64ImageRequest) (*BaseGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStringBase64Image not implemented")
}
func (UnimplementedQRCodeServer) mustEmbedUnimplementedQRCodeServer() {}

// UnsafeQRCodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QRCodeServer will
// result in compilation errors.
type UnsafeQRCodeServer interface {
	mustEmbedUnimplementedQRCodeServer()
}

func RegisterQRCodeServer(s grpc.ServiceRegistrar, srv QRCodeServer) {
	s.RegisterService(&QRCode_ServiceDesc, srv)
}

func _QRCode_GetStringBase64Image_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStringBase64ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QRCodeServer).GetStringBase64Image(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QRCode_GetStringBase64Image_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QRCodeServer).GetStringBase64Image(ctx, req.(*GetStringBase64ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QRCode_ServiceDesc is the grpc.ServiceDesc for QRCode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QRCode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "online.gonlink.QRCode",
	HandlerType: (*QRCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getStringBase64Image",
			Handler:    _QRCode_GetStringBase64Image_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qr-code-service.proto",
}
