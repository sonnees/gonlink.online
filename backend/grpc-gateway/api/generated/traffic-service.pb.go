// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: traffic-service.proto

package proto

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// === Constant ===
type DataClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data int64  `protobuf:"varint,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataClient) Reset() {
	*x = DataClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataClient) ProtoMessage() {}

func (x *DataClient) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataClient.ProtoReflect.Descriptor instead.
func (*DataClient) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{0}
}

func (x *DataClient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataClient) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

// === GeneralTraffics ===
type GeneralTrafficsSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          *int32  `protobuf:"varint,1,opt,name=page,proto3,oneof" json:"page,omitempty"`
	Size          *int32  `protobuf:"varint,2,opt,name=size,proto3,oneof" json:"size,omitempty"`
	SortDirection *string `protobuf:"bytes,3,opt,name=sortDirection,proto3,oneof" json:"sortDirection,omitempty"`
	ZoneId        string  `protobuf:"bytes,4,opt,name=zoneId,proto3" json:"zoneId,omitempty"`
	FromDate      *string `protobuf:"bytes,5,opt,name=fromDate,proto3,oneof" json:"fromDate,omitempty"`
	ToDate        *string `protobuf:"bytes,6,opt,name=toDate,proto3,oneof" json:"toDate,omitempty"`
}

func (x *GeneralTrafficsSearchRequest) Reset() {
	*x = GeneralTrafficsSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralTrafficsSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralTrafficsSearchRequest) ProtoMessage() {}

func (x *GeneralTrafficsSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralTrafficsSearchRequest.ProtoReflect.Descriptor instead.
func (*GeneralTrafficsSearchRequest) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{1}
}

func (x *GeneralTrafficsSearchRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *GeneralTrafficsSearchRequest) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *GeneralTrafficsSearchRequest) GetSortDirection() string {
	if x != nil && x.SortDirection != nil {
		return *x.SortDirection
	}
	return ""
}

func (x *GeneralTrafficsSearchRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *GeneralTrafficsSearchRequest) GetFromDate() string {
	if x != nil && x.FromDate != nil {
		return *x.FromDate
	}
	return ""
}

func (x *GeneralTrafficsSearchRequest) GetToDate() string {
	if x != nil && x.ToDate != nil {
		return *x.ToDate
	}
	return ""
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage   int32 `protobuf:"varint,1,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	TotalPages    int32 `protobuf:"varint,2,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalElements int64 `protobuf:"varint,3,opt,name=totalElements,proto3" json:"totalElements,omitempty"`
	PageSize      int32 `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{2}
}

func (x *PageInfo) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *PageInfo) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *PageInfo) GetTotalElements() int64 {
	if x != nil {
		return x.TotalElements
	}
	return 0
}

func (x *PageInfo) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GeneralTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortCode       string `protobuf:"bytes,1,opt,name=shortCode,proto3" json:"shortCode,omitempty"`
	OriginalUrl     string `protobuf:"bytes,2,opt,name=originalUrl,proto3" json:"originalUrl,omitempty"`
	TrafficDate     string `protobuf:"bytes,3,opt,name=trafficDate,proto3" json:"trafficDate,omitempty"`
	Traffic         int64  `protobuf:"varint,4,opt,name=traffic,proto3" json:"traffic,omitempty"`
	Active          bool   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	Alias           string `protobuf:"bytes,6,opt,name=alias,proto3" json:"alias,omitempty"`
	Desc            string `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	TimeExpired     string `protobuf:"bytes,8,opt,name=timeExpired,proto3" json:"timeExpired,omitempty"`
	IsUsingPassword bool   `protobuf:"varint,9,opt,name=isUsingPassword,proto3" json:"isUsingPassword,omitempty"`
	MaxUsage        int64  `protobuf:"varint,10,opt,name=maxUsage,proto3" json:"maxUsage,omitempty"`
}

func (x *GeneralTraffic) Reset() {
	*x = GeneralTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralTraffic) ProtoMessage() {}

func (x *GeneralTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralTraffic.ProtoReflect.Descriptor instead.
func (*GeneralTraffic) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{3}
}

func (x *GeneralTraffic) GetShortCode() string {
	if x != nil {
		return x.ShortCode
	}
	return ""
}

func (x *GeneralTraffic) GetOriginalUrl() string {
	if x != nil {
		return x.OriginalUrl
	}
	return ""
}

func (x *GeneralTraffic) GetTrafficDate() string {
	if x != nil {
		return x.TrafficDate
	}
	return ""
}

func (x *GeneralTraffic) GetTraffic() int64 {
	if x != nil {
		return x.Traffic
	}
	return 0
}

func (x *GeneralTraffic) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *GeneralTraffic) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *GeneralTraffic) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GeneralTraffic) GetTimeExpired() string {
	if x != nil {
		return x.TimeExpired
	}
	return ""
}

func (x *GeneralTraffic) GetIsUsingPassword() bool {
	if x != nil {
		return x.IsUsingPassword
	}
	return false
}

func (x *GeneralTraffic) GetMaxUsage() int64 {
	if x != nil {
		return x.MaxUsage
	}
	return 0
}

type GeneralTrafficsSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneralTraffic []*GeneralTraffic `protobuf:"bytes,1,rep,name=generalTraffic,proto3" json:"generalTraffic,omitempty"`
	PageInfo       *PageInfo         `protobuf:"bytes,2,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
}

func (x *GeneralTrafficsSearchResponse) Reset() {
	*x = GeneralTrafficsSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralTrafficsSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralTrafficsSearchResponse) ProtoMessage() {}

func (x *GeneralTrafficsSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralTrafficsSearchResponse.ProtoReflect.Descriptor instead.
func (*GeneralTrafficsSearchResponse) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{4}
}

func (x *GeneralTrafficsSearchResponse) GetGeneralTraffic() []*GeneralTraffic {
	if x != nil {
		return x.GeneralTraffic
	}
	return nil
}

func (x *GeneralTrafficsSearchResponse) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

// === MonthTraffics ===
type MonthTrafficsGetAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortCode string `protobuf:"bytes,1,opt,name=shortCode,proto3" json:"shortCode,omitempty"`
	ZoneId    string `protobuf:"bytes,2,opt,name=zoneId,proto3" json:"zoneId,omitempty"`
}

func (x *MonthTrafficsGetAllRequest) Reset() {
	*x = MonthTrafficsGetAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthTrafficsGetAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthTrafficsGetAllRequest) ProtoMessage() {}

func (x *MonthTrafficsGetAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthTrafficsGetAllRequest.ProtoReflect.Descriptor instead.
func (*MonthTrafficsGetAllRequest) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{5}
}

func (x *MonthTrafficsGetAllRequest) GetShortCode() string {
	if x != nil {
		return x.ShortCode
	}
	return ""
}

func (x *MonthTrafficsGetAllRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

type MonthTrafficGetAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficData []*DataClient `protobuf:"bytes,1,rep,name=trafficData,proto3" json:"trafficData,omitempty"`
}

func (x *MonthTrafficGetAllResponse) Reset() {
	*x = MonthTrafficGetAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthTrafficGetAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthTrafficGetAllResponse) ProtoMessage() {}

func (x *MonthTrafficGetAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthTrafficGetAllResponse.ProtoReflect.Descriptor instead.
func (*MonthTrafficGetAllResponse) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{6}
}

func (x *MonthTrafficGetAllResponse) GetTrafficData() []*DataClient {
	if x != nil {
		return x.TrafficData
	}
	return nil
}

// === DayTraffics ===
type DayTrafficInRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortCode string `protobuf:"bytes,1,opt,name=shortCode,proto3" json:"shortCode,omitempty"`
	FromDate  string `protobuf:"bytes,2,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	ToDate    string `protobuf:"bytes,3,opt,name=toDate,proto3" json:"toDate,omitempty"`
	ZoneId    string `protobuf:"bytes,4,opt,name=zoneId,proto3" json:"zoneId,omitempty"`
}

func (x *DayTrafficInRangeRequest) Reset() {
	*x = DayTrafficInRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayTrafficInRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayTrafficInRangeRequest) ProtoMessage() {}

func (x *DayTrafficInRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayTrafficInRangeRequest.ProtoReflect.Descriptor instead.
func (*DayTrafficInRangeRequest) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{7}
}

func (x *DayTrafficInRangeRequest) GetShortCode() string {
	if x != nil {
		return x.ShortCode
	}
	return ""
}

func (x *DayTrafficInRangeRequest) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *DayTrafficInRangeRequest) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

func (x *DayTrafficInRangeRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

type DayTrafficInRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Click            []*DataClient `protobuf:"bytes,1,rep,name=click,proto3" json:"click,omitempty"`
	Cities           []*DataClient `protobuf:"bytes,2,rep,name=cities,proto3" json:"cities,omitempty"`
	Countries        []*DataClient `protobuf:"bytes,3,rep,name=countries,proto3" json:"countries,omitempty"`
	ZoneIds          []*DataClient `protobuf:"bytes,4,rep,name=zoneIds,proto3" json:"zoneIds,omitempty"`
	Browsers         []*DataClient `protobuf:"bytes,5,rep,name=browsers,proto3" json:"browsers,omitempty"`
	BrowserVersions  []*DataClient `protobuf:"bytes,6,rep,name=browserVersions,proto3" json:"browserVersions,omitempty"`
	OperatingSystems []*DataClient `protobuf:"bytes,7,rep,name=operatingSystems,proto3" json:"operatingSystems,omitempty"`
	DeviceTypes      []*DataClient `protobuf:"bytes,8,rep,name=deviceTypes,proto3" json:"deviceTypes,omitempty"`
}

func (x *DayTrafficInRangeResponse) Reset() {
	*x = DayTrafficInRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayTrafficInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayTrafficInRangeResponse) ProtoMessage() {}

func (x *DayTrafficInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayTrafficInRangeResponse.ProtoReflect.Descriptor instead.
func (*DayTrafficInRangeResponse) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{8}
}

func (x *DayTrafficInRangeResponse) GetClick() []*DataClient {
	if x != nil {
		return x.Click
	}
	return nil
}

func (x *DayTrafficInRangeResponse) GetCities() []*DataClient {
	if x != nil {
		return x.Cities
	}
	return nil
}

func (x *DayTrafficInRangeResponse) GetCountries() []*DataClient {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *DayTrafficInRangeResponse) GetZoneIds() []*DataClient {
	if x != nil {
		return x.ZoneIds
	}
	return nil
}

func (x *DayTrafficInRangeResponse) GetBrowsers() []*DataClient {
	if x != nil {
		return x.Browsers
	}
	return nil
}

func (x *DayTrafficInRangeResponse) GetBrowserVersions() []*DataClient {
	if x != nil {
		return x.BrowserVersions
	}
	return nil
}

func (x *DayTrafficInRangeResponse) GetOperatingSystems() []*DataClient {
	if x != nil {
		return x.OperatingSystems
	}
	return nil
}

func (x *DayTrafficInRangeResponse) GetDeviceTypes() []*DataClient {
	if x != nil {
		return x.DeviceTypes
	}
	return nil
}

// === RealTimeTraffics ===
type RealTimeTrafficRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortCode string `protobuf:"bytes,1,opt,name=shortCode,proto3" json:"shortCode,omitempty"`
	ZoneId    string `protobuf:"bytes,2,opt,name=zoneId,proto3" json:"zoneId,omitempty"`
}

func (x *RealTimeTrafficRequest) Reset() {
	*x = RealTimeTrafficRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeTrafficRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeTrafficRequest) ProtoMessage() {}

func (x *RealTimeTrafficRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeTrafficRequest.ProtoReflect.Descriptor instead.
func (*RealTimeTrafficRequest) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{9}
}

func (x *RealTimeTrafficRequest) GetShortCode() string {
	if x != nil {
		return x.ShortCode
	}
	return ""
}

func (x *RealTimeTrafficRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

type RealTimeTrafficResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []int32 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *RealTimeTrafficResponse) Reset() {
	*x = RealTimeTrafficResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeTrafficResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeTrafficResponse) ProtoMessage() {}

func (x *RealTimeTrafficResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeTrafficResponse.ProtoReflect.Descriptor instead.
func (*RealTimeTrafficResponse) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{10}
}

func (x *RealTimeTrafficResponse) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

// === RealTimeTrafficsAccount ===
type RealTimeTrafficAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId string `protobuf:"bytes,1,opt,name=zoneId,proto3" json:"zoneId,omitempty"`
}

func (x *RealTimeTrafficAccountRequest) Reset() {
	*x = RealTimeTrafficAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeTrafficAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeTrafficAccountRequest) ProtoMessage() {}

func (x *RealTimeTrafficAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeTrafficAccountRequest.ProtoReflect.Descriptor instead.
func (*RealTimeTrafficAccountRequest) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{11}
}

func (x *RealTimeTrafficAccountRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

type RealTimeTrafficAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data            []int32           `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
	GeneralTraffics []*GeneralTraffic `protobuf:"bytes,2,rep,name=generalTraffics,proto3" json:"generalTraffics,omitempty"`
}

func (x *RealTimeTrafficAccountResponse) Reset() {
	*x = RealTimeTrafficAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeTrafficAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeTrafficAccountResponse) ProtoMessage() {}

func (x *RealTimeTrafficAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeTrafficAccountResponse.ProtoReflect.Descriptor instead.
func (*RealTimeTrafficAccountResponse) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{12}
}

func (x *RealTimeTrafficAccountResponse) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RealTimeTrafficAccountResponse) GetGeneralTraffics() []*GeneralTraffic {
	if x != nil {
		return x.GeneralTraffics
	}
	return nil
}

// === DayTrafficsAccount ===
type DayTrafficAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId   string `protobuf:"bytes,1,opt,name=zoneId,proto3" json:"zoneId,omitempty"`
	FromDate string `protobuf:"bytes,2,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	ToDate   string `protobuf:"bytes,3,opt,name=toDate,proto3" json:"toDate,omitempty"`
}

func (x *DayTrafficAccountRequest) Reset() {
	*x = DayTrafficAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayTrafficAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayTrafficAccountRequest) ProtoMessage() {}

func (x *DayTrafficAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayTrafficAccountRequest.ProtoReflect.Descriptor instead.
func (*DayTrafficAccountRequest) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{13}
}

func (x *DayTrafficAccountRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *DayTrafficAccountRequest) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *DayTrafficAccountRequest) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

type DayTrafficAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cities           []*DataClient `protobuf:"bytes,2,rep,name=cities,proto3" json:"cities,omitempty"`
	Countries        []*DataClient `protobuf:"bytes,3,rep,name=countries,proto3" json:"countries,omitempty"`
	ZoneIds          []*DataClient `protobuf:"bytes,4,rep,name=zoneIds,proto3" json:"zoneIds,omitempty"`
	Browsers         []*DataClient `protobuf:"bytes,5,rep,name=browsers,proto3" json:"browsers,omitempty"`
	BrowserVersions  []*DataClient `protobuf:"bytes,6,rep,name=browserVersions,proto3" json:"browserVersions,omitempty"`
	OperatingSystems []*DataClient `protobuf:"bytes,7,rep,name=operatingSystems,proto3" json:"operatingSystems,omitempty"`
	DeviceTypes      []*DataClient `protobuf:"bytes,8,rep,name=deviceTypes,proto3" json:"deviceTypes,omitempty"`
}

func (x *DayTrafficAccount) Reset() {
	*x = DayTrafficAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayTrafficAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayTrafficAccount) ProtoMessage() {}

func (x *DayTrafficAccount) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayTrafficAccount.ProtoReflect.Descriptor instead.
func (*DayTrafficAccount) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{14}
}

func (x *DayTrafficAccount) GetCities() []*DataClient {
	if x != nil {
		return x.Cities
	}
	return nil
}

func (x *DayTrafficAccount) GetCountries() []*DataClient {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *DayTrafficAccount) GetZoneIds() []*DataClient {
	if x != nil {
		return x.ZoneIds
	}
	return nil
}

func (x *DayTrafficAccount) GetBrowsers() []*DataClient {
	if x != nil {
		return x.Browsers
	}
	return nil
}

func (x *DayTrafficAccount) GetBrowserVersions() []*DataClient {
	if x != nil {
		return x.BrowserVersions
	}
	return nil
}

func (x *DayTrafficAccount) GetOperatingSystems() []*DataClient {
	if x != nil {
		return x.OperatingSystems
	}
	return nil
}

func (x *DayTrafficAccount) GetDeviceTypes() []*DataClient {
	if x != nil {
		return x.DeviceTypes
	}
	return nil
}

type DayTrafficAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data              []*DataClient      `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	GeneralTraffics   []*GeneralTraffic  `protobuf:"bytes,2,rep,name=generalTraffics,proto3" json:"generalTraffics,omitempty"`
	DayTrafficAccount *DayTrafficAccount `protobuf:"bytes,3,opt,name=dayTrafficAccount,proto3" json:"dayTrafficAccount,omitempty"`
}

func (x *DayTrafficAccountResponse) Reset() {
	*x = DayTrafficAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traffic_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayTrafficAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayTrafficAccountResponse) ProtoMessage() {}

func (x *DayTrafficAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traffic_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayTrafficAccountResponse.ProtoReflect.Descriptor instead.
func (*DayTrafficAccountResponse) Descriptor() ([]byte, []int) {
	return file_traffic_service_proto_rawDescGZIP(), []int{15}
}

func (x *DayTrafficAccountResponse) GetData() []*DataClient {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DayTrafficAccountResponse) GetGeneralTraffics() []*GeneralTraffic {
	if x != nil {
		return x.GeneralTraffics
	}
	return nil
}

func (x *DayTrafficAccountResponse) GetDayTrafficAccount() *DayTrafficAccount {
	if x != nil {
		return x.DayTrafficAccount
	}
	return nil
}

var File_traffic_service_proto protoreflect.FileDescriptor

var file_traffic_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x02, 0x0a, 0x1c, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x08, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x0e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x69, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x34, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x73, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xf5, 0x03, 0x0a, 0x19, 0x44,
	0x61, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x36,
	0x0a, 0x08, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x10,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0x4e, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x22, 0x2d, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x37, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1e, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x48, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x73, 0x22, 0x66, 0x0a, 0x18, 0x44, 0x61,
	0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x11, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x08,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x22, 0xe6, 0x01, 0x0a, 0x19, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48,
	0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x64, 0x61, 0x79, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x11, 0x64, 0x61, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xb4, 0x06, 0x0a, 0x07, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x73, 0x12,
	0x2c, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x73,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x47, 0x72, 0x70, 0x63, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a,
	0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x82, 0x01, 0x0a,
	0x13, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x73, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x47, 0x72, 0x70, 0x63, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x73, 0x2f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2d, 0x61, 0x6c,
	0x6c, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x79, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x47, 0x72, 0x70, 0x63, 0x22, 0x25,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x73, 0x2f, 0x64, 0x61, 0x79, 0x2d,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x7d, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x26, 0x2e, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x47, 0x72, 0x70, 0x63, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x73, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x47, 0x72, 0x70, 0x63, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x73, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x2d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x67,
	0x65, 0x74, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x47, 0x72, 0x70, 0x63, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a,
	0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x73, 0x2f, 0x64, 0x61, 0x79, 0x2d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x18, 0x5a, 0x16, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_traffic_service_proto_rawDescOnce sync.Once
	file_traffic_service_proto_rawDescData = file_traffic_service_proto_rawDesc
)

func file_traffic_service_proto_rawDescGZIP() []byte {
	file_traffic_service_proto_rawDescOnce.Do(func() {
		file_traffic_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_traffic_service_proto_rawDescData)
	})
	return file_traffic_service_proto_rawDescData
}

var file_traffic_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_traffic_service_proto_goTypes = []any{
	(*DataClient)(nil),                     // 0: online.gonlink.DataClient
	(*GeneralTrafficsSearchRequest)(nil),   // 1: online.gonlink.GeneralTrafficsSearchRequest
	(*PageInfo)(nil),                       // 2: online.gonlink.PageInfo
	(*GeneralTraffic)(nil),                 // 3: online.gonlink.GeneralTraffic
	(*GeneralTrafficsSearchResponse)(nil),  // 4: online.gonlink.GeneralTrafficsSearchResponse
	(*MonthTrafficsGetAllRequest)(nil),     // 5: online.gonlink.MonthTrafficsGetAllRequest
	(*MonthTrafficGetAllResponse)(nil),     // 6: online.gonlink.MonthTrafficGetAllResponse
	(*DayTrafficInRangeRequest)(nil),       // 7: online.gonlink.DayTrafficInRangeRequest
	(*DayTrafficInRangeResponse)(nil),      // 8: online.gonlink.DayTrafficInRangeResponse
	(*RealTimeTrafficRequest)(nil),         // 9: online.gonlink.RealTimeTrafficRequest
	(*RealTimeTrafficResponse)(nil),        // 10: online.gonlink.RealTimeTrafficResponse
	(*RealTimeTrafficAccountRequest)(nil),  // 11: online.gonlink.RealTimeTrafficAccountRequest
	(*RealTimeTrafficAccountResponse)(nil), // 12: online.gonlink.RealTimeTrafficAccountResponse
	(*DayTrafficAccountRequest)(nil),       // 13: online.gonlink.DayTrafficAccountRequest
	(*DayTrafficAccount)(nil),              // 14: online.gonlink.DayTrafficAccount
	(*DayTrafficAccountResponse)(nil),      // 15: online.gonlink.DayTrafficAccountResponse
	(*BaseGrpc)(nil),                       // 16: online.gonlink.BaseGrpc
}
var file_traffic_service_proto_depIdxs = []int32{
	3,  // 0: online.gonlink.GeneralTrafficsSearchResponse.generalTraffic:type_name -> online.gonlink.GeneralTraffic
	2,  // 1: online.gonlink.GeneralTrafficsSearchResponse.pageInfo:type_name -> online.gonlink.PageInfo
	0,  // 2: online.gonlink.MonthTrafficGetAllResponse.trafficData:type_name -> online.gonlink.DataClient
	0,  // 3: online.gonlink.DayTrafficInRangeResponse.click:type_name -> online.gonlink.DataClient
	0,  // 4: online.gonlink.DayTrafficInRangeResponse.cities:type_name -> online.gonlink.DataClient
	0,  // 5: online.gonlink.DayTrafficInRangeResponse.countries:type_name -> online.gonlink.DataClient
	0,  // 6: online.gonlink.DayTrafficInRangeResponse.zoneIds:type_name -> online.gonlink.DataClient
	0,  // 7: online.gonlink.DayTrafficInRangeResponse.browsers:type_name -> online.gonlink.DataClient
	0,  // 8: online.gonlink.DayTrafficInRangeResponse.browserVersions:type_name -> online.gonlink.DataClient
	0,  // 9: online.gonlink.DayTrafficInRangeResponse.operatingSystems:type_name -> online.gonlink.DataClient
	0,  // 10: online.gonlink.DayTrafficInRangeResponse.deviceTypes:type_name -> online.gonlink.DataClient
	3,  // 11: online.gonlink.RealTimeTrafficAccountResponse.generalTraffics:type_name -> online.gonlink.GeneralTraffic
	0,  // 12: online.gonlink.DayTrafficAccount.cities:type_name -> online.gonlink.DataClient
	0,  // 13: online.gonlink.DayTrafficAccount.countries:type_name -> online.gonlink.DataClient
	0,  // 14: online.gonlink.DayTrafficAccount.zoneIds:type_name -> online.gonlink.DataClient
	0,  // 15: online.gonlink.DayTrafficAccount.browsers:type_name -> online.gonlink.DataClient
	0,  // 16: online.gonlink.DayTrafficAccount.browserVersions:type_name -> online.gonlink.DataClient
	0,  // 17: online.gonlink.DayTrafficAccount.operatingSystems:type_name -> online.gonlink.DataClient
	0,  // 18: online.gonlink.DayTrafficAccount.deviceTypes:type_name -> online.gonlink.DataClient
	0,  // 19: online.gonlink.DayTrafficAccountResponse.data:type_name -> online.gonlink.DataClient
	3,  // 20: online.gonlink.DayTrafficAccountResponse.generalTraffics:type_name -> online.gonlink.GeneralTraffic
	14, // 21: online.gonlink.DayTrafficAccountResponse.dayTrafficAccount:type_name -> online.gonlink.DayTrafficAccount
	1,  // 22: online.gonlink.Traffic.searchGeneralTraffics:input_type -> online.gonlink.GeneralTrafficsSearchRequest
	5,  // 23: online.gonlink.Traffic.getAllMonthTraffics:input_type -> online.gonlink.MonthTrafficsGetAllRequest
	7,  // 24: online.gonlink.Traffic.getDayTrafficInRange:input_type -> online.gonlink.DayTrafficInRangeRequest
	9,  // 25: online.gonlink.Traffic.getRealTimeTraffic:input_type -> online.gonlink.RealTimeTrafficRequest
	11, // 26: online.gonlink.Traffic.getRealTimeTrafficAccount:input_type -> online.gonlink.RealTimeTrafficAccountRequest
	13, // 27: online.gonlink.Traffic.getDayTrafficAccount:input_type -> online.gonlink.DayTrafficAccountRequest
	16, // 28: online.gonlink.Traffic.searchGeneralTraffics:output_type -> online.gonlink.BaseGrpc
	16, // 29: online.gonlink.Traffic.getAllMonthTraffics:output_type -> online.gonlink.BaseGrpc
	16, // 30: online.gonlink.Traffic.getDayTrafficInRange:output_type -> online.gonlink.BaseGrpc
	16, // 31: online.gonlink.Traffic.getRealTimeTraffic:output_type -> online.gonlink.BaseGrpc
	16, // 32: online.gonlink.Traffic.getRealTimeTrafficAccount:output_type -> online.gonlink.BaseGrpc
	16, // 33: online.gonlink.Traffic.getDayTrafficAccount:output_type -> online.gonlink.BaseGrpc
	28, // [28:34] is the sub-list for method output_type
	22, // [22:28] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_traffic_service_proto_init() }
func file_traffic_service_proto_init() {
	if File_traffic_service_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_traffic_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DataClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GeneralTrafficsSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GeneralTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GeneralTrafficsSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MonthTrafficsGetAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MonthTrafficGetAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DayTrafficInRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DayTrafficInRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RealTimeTrafficRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RealTimeTrafficResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RealTimeTrafficAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*RealTimeTrafficAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DayTrafficAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DayTrafficAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traffic_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DayTrafficAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_traffic_service_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_traffic_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_traffic_service_proto_goTypes,
		DependencyIndexes: file_traffic_service_proto_depIdxs,
		MessageInfos:      file_traffic_service_proto_msgTypes,
	}.Build()
	File_traffic_service_proto = out.File
	file_traffic_service_proto_rawDesc = nil
	file_traffic_service_proto_goTypes = nil
	file_traffic_service_proto_depIdxs = nil
}
