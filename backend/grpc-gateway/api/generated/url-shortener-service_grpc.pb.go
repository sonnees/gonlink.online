// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: url-shortener-service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UrlShortener_CheckExistShortCode_FullMethodName             = "/online.gonlink.UrlShortener/checkExistShortCode"
	UrlShortener_CheckNeedPasswordGetOriginalUrl_FullMethodName = "/online.gonlink.UrlShortener/checkNeedPasswordGetOriginalUrl"
	UrlShortener_GenerateShortCode_FullMethodName               = "/online.gonlink.UrlShortener/generateShortCode"
	UrlShortener_GenerateShortCodeAccount_FullMethodName        = "/online.gonlink.UrlShortener/generateShortCodeAccount"
	UrlShortener_GetOriginalUrl_FullMethodName                  = "/online.gonlink.UrlShortener/getOriginalUrl"
	UrlShortener_RemoveByID_FullMethodName                      = "/online.gonlink.UrlShortener/removeByID"
	UrlShortener_UpdateByID_FullMethodName                      = "/online.gonlink.UrlShortener/updateByID"
)

// UrlShortenerClient is the client API for UrlShortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlShortenerClient interface {
	CheckExistShortCode(ctx context.Context, in *ShortCodeCheckExistRequest, opts ...grpc.CallOption) (*BaseGrpc, error)
	CheckNeedPasswordGetOriginalUrl(ctx context.Context, in *OriginalUrlCheckNeedPasswordRequest, opts ...grpc.CallOption) (*BaseGrpc, error)
	GenerateShortCode(ctx context.Context, in *GenerateShortCodeRequest, opts ...grpc.CallOption) (*BaseGrpc, error)
	GenerateShortCodeAccount(ctx context.Context, in *GenerateShortCodeAccountRequest, opts ...grpc.CallOption) (*BaseGrpc, error)
	GetOriginalUrl(ctx context.Context, in *GetOriginalUrlRequest, opts ...grpc.CallOption) (*BaseGrpc, error)
	RemoveByID(ctx context.Context, in *RemoveUrlRequest, opts ...grpc.CallOption) (*BaseGrpc, error)
	UpdateByID(ctx context.Context, in *ShortCodeUpdateRequest, opts ...grpc.CallOption) (*BaseGrpc, error)
}

type urlShortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlShortenerClient(cc grpc.ClientConnInterface) UrlShortenerClient {
	return &urlShortenerClient{cc}
}

func (c *urlShortenerClient) CheckExistShortCode(ctx context.Context, in *ShortCodeCheckExistRequest, opts ...grpc.CallOption) (*BaseGrpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseGrpc)
	err := c.cc.Invoke(ctx, UrlShortener_CheckExistShortCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) CheckNeedPasswordGetOriginalUrl(ctx context.Context, in *OriginalUrlCheckNeedPasswordRequest, opts ...grpc.CallOption) (*BaseGrpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseGrpc)
	err := c.cc.Invoke(ctx, UrlShortener_CheckNeedPasswordGetOriginalUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) GenerateShortCode(ctx context.Context, in *GenerateShortCodeRequest, opts ...grpc.CallOption) (*BaseGrpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseGrpc)
	err := c.cc.Invoke(ctx, UrlShortener_GenerateShortCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) GenerateShortCodeAccount(ctx context.Context, in *GenerateShortCodeAccountRequest, opts ...grpc.CallOption) (*BaseGrpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseGrpc)
	err := c.cc.Invoke(ctx, UrlShortener_GenerateShortCodeAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) GetOriginalUrl(ctx context.Context, in *GetOriginalUrlRequest, opts ...grpc.CallOption) (*BaseGrpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseGrpc)
	err := c.cc.Invoke(ctx, UrlShortener_GetOriginalUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) RemoveByID(ctx context.Context, in *RemoveUrlRequest, opts ...grpc.CallOption) (*BaseGrpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseGrpc)
	err := c.cc.Invoke(ctx, UrlShortener_RemoveByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) UpdateByID(ctx context.Context, in *ShortCodeUpdateRequest, opts ...grpc.CallOption) (*BaseGrpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseGrpc)
	err := c.cc.Invoke(ctx, UrlShortener_UpdateByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlShortenerServer is the server API for UrlShortener service.
// All implementations must embed UnimplementedUrlShortenerServer
// for forward compatibility
type UrlShortenerServer interface {
	CheckExistShortCode(context.Context, *ShortCodeCheckExistRequest) (*BaseGrpc, error)
	CheckNeedPasswordGetOriginalUrl(context.Context, *OriginalUrlCheckNeedPasswordRequest) (*BaseGrpc, error)
	GenerateShortCode(context.Context, *GenerateShortCodeRequest) (*BaseGrpc, error)
	GenerateShortCodeAccount(context.Context, *GenerateShortCodeAccountRequest) (*BaseGrpc, error)
	GetOriginalUrl(context.Context, *GetOriginalUrlRequest) (*BaseGrpc, error)
	RemoveByID(context.Context, *RemoveUrlRequest) (*BaseGrpc, error)
	UpdateByID(context.Context, *ShortCodeUpdateRequest) (*BaseGrpc, error)
	mustEmbedUnimplementedUrlShortenerServer()
}

// UnimplementedUrlShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedUrlShortenerServer struct {
}

func (UnimplementedUrlShortenerServer) CheckExistShortCode(context.Context, *ShortCodeCheckExistRequest) (*BaseGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckExistShortCode not implemented")
}
func (UnimplementedUrlShortenerServer) CheckNeedPasswordGetOriginalUrl(context.Context, *OriginalUrlCheckNeedPasswordRequest) (*BaseGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNeedPasswordGetOriginalUrl not implemented")
}
func (UnimplementedUrlShortenerServer) GenerateShortCode(context.Context, *GenerateShortCodeRequest) (*BaseGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShortCode not implemented")
}
func (UnimplementedUrlShortenerServer) GenerateShortCodeAccount(context.Context, *GenerateShortCodeAccountRequest) (*BaseGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShortCodeAccount not implemented")
}
func (UnimplementedUrlShortenerServer) GetOriginalUrl(context.Context, *GetOriginalUrlRequest) (*BaseGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalUrl not implemented")
}
func (UnimplementedUrlShortenerServer) RemoveByID(context.Context, *RemoveUrlRequest) (*BaseGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveByID not implemented")
}
func (UnimplementedUrlShortenerServer) UpdateByID(context.Context, *ShortCodeUpdateRequest) (*BaseGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedUrlShortenerServer) mustEmbedUnimplementedUrlShortenerServer() {}

// UnsafeUrlShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlShortenerServer will
// result in compilation errors.
type UnsafeUrlShortenerServer interface {
	mustEmbedUnimplementedUrlShortenerServer()
}

func RegisterUrlShortenerServer(s grpc.ServiceRegistrar, srv UrlShortenerServer) {
	s.RegisterService(&UrlShortener_ServiceDesc, srv)
}

func _UrlShortener_CheckExistShortCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortCodeCheckExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).CheckExistShortCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_CheckExistShortCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).CheckExistShortCode(ctx, req.(*ShortCodeCheckExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortener_CheckNeedPasswordGetOriginalUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OriginalUrlCheckNeedPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).CheckNeedPasswordGetOriginalUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_CheckNeedPasswordGetOriginalUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).CheckNeedPasswordGetOriginalUrl(ctx, req.(*OriginalUrlCheckNeedPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortener_GenerateShortCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateShortCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).GenerateShortCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_GenerateShortCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).GenerateShortCode(ctx, req.(*GenerateShortCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortener_GenerateShortCodeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateShortCodeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).GenerateShortCodeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_GenerateShortCodeAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).GenerateShortCodeAccount(ctx, req.(*GenerateShortCodeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortener_GetOriginalUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).GetOriginalUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_GetOriginalUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).GetOriginalUrl(ctx, req.(*GetOriginalUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortener_RemoveByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).RemoveByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_RemoveByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).RemoveByID(ctx, req.(*RemoveUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortener_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortCodeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_UpdateByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).UpdateByID(ctx, req.(*ShortCodeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlShortener_ServiceDesc is the grpc.ServiceDesc for UrlShortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlShortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "online.gonlink.UrlShortener",
	HandlerType: (*UrlShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "checkExistShortCode",
			Handler:    _UrlShortener_CheckExistShortCode_Handler,
		},
		{
			MethodName: "checkNeedPasswordGetOriginalUrl",
			Handler:    _UrlShortener_CheckNeedPasswordGetOriginalUrl_Handler,
		},
		{
			MethodName: "generateShortCode",
			Handler:    _UrlShortener_GenerateShortCode_Handler,
		},
		{
			MethodName: "generateShortCodeAccount",
			Handler:    _UrlShortener_GenerateShortCodeAccount_Handler,
		},
		{
			MethodName: "getOriginalUrl",
			Handler:    _UrlShortener_GetOriginalUrl_Handler,
		},
		{
			MethodName: "removeByID",
			Handler:    _UrlShortener_RemoveByID_Handler,
		},
		{
			MethodName: "updateByID",
			Handler:    _UrlShortener_UpdateByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "url-shortener-service.proto",
}
